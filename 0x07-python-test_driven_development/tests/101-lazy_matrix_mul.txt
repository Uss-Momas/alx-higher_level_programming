===============
Testing numpy multiplication
===============


# Importing

>>> lazy_matrix_mul = __import__('101-lazy_matrix_mul').lazy_matrix_mul


checking for module docstring
::
        >>> Mdocs = __import__("101-lazy_matrix_mul").__doc__
        >>> len(Mdocs) > 5
        True

checking function docstring for module
::
        >>> Fdocs = lazy_matrix_mul.__doc__
        >>> len(Fdocs) > 5
        True

# Test 1

>>> print(lazy_matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]]))
[[ 7 10]
 [15 22]]

# Test 2

>>> print(lazy_matrix_mul([[1, 2]], [[3, 4], [5, 6]]))
[[13 16]]


# Test 3:

	>>> lazy_matrix_mul([[2, 3, 4], [4, 2, 3]], None)
	Traceback (most recent call last):
	...
	TypeError: Object arrays are not currently supported
	>>> lazy_matrix_mul("school", [[2, 3, 4], [4, 2, 3]])
	Traceback (most recent call last):
	...
	ValueError: Scalar operands are not allowed, use '*' instead


Tests when wrong values are passed as arguement
::
	>>> lazy_matrix_mul([[]], [[2, 4]])
	Traceback (most recent call last):
	...
	ValueError: shapes (1,0) and (1,2) not aligned: 0 (dim 1) != 1 (dim 0)
	>>> lazy_matrix_mul([], [[2, 4, 4.8]])
	Traceback (most recent call last):
	...
	ValueError: shapes (0,) and (1,3) not aligned: 0 (dim 0) != 1 (dim 0)
	>>> lazy_matrix_mul([[1, 4.2], [1, 4.0]], [])
	Traceback (most recent call last):
	...
	ValueError: shapes (2,2) and (0,) not aligned: 2 (dim 1) != 0 (dim 0)
	>>> lazy_matrix_mul([[1.5, 4.2], [1, 4.0]], [[]])
	Traceback (most recent call last):
	...
	ValueError: shapes (2,2) and (1,0) not aligned: 2 (dim 1) != 1 (dim 0)
	>>> lazy_matrix_mul([[1, 4.2, 3], [1, 4.0, 4]], [[1, 4], [3, 5]])
	Traceback (most recent call last):
	...
	ValueError: shapes (2,3) and (2,2) not aligned: 3 (dim 1) != 2 (dim 0)
	>>> lazy_matrix_mul([[1, 3], [3, 4], [4, 2]], [[1, 4], [3, 5], [4, 1]])
	Traceback (most recent call last):
	...
	ValueError: shapes (3,2) and (3,2) not aligned: 2 (dim 1) != 3 (dim 0)
