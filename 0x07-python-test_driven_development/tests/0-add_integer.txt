============================
How to use 0-add_integer.py
============================

This library is very easy, since it has one function called
``add_integer()``

Numbers
=======

``add_integer()`` returns the addiction of its arguments. For numbers
the value is equivalent to using the ``+`` operator.

::
	>>> add_integer = __import__("0-add_integer").add_integer

checking for module docstring
::
        >>> mod_string = __import__("0-add_integer").__doc__
        >>> len(mod_string) > 5
        True

checking for function docstring
::
        >>> fun_docs = add_integer.__doc__
        >>> len(fun_docs) > 5
        True


checking addition of positive integer
::
        >>> add_integer(3, 2)
        5
        >>> add_integer(20000, 40000)
        60000


checking addition of negative numbers
::
	>>> add_integer(-1000, -2000)
	-3000
	>>> add_integer(-1, -1)
	-2
	>>> add_integer(-1)
	97


checking addition of float numbers
::
	>>> add_integer(0.2, 3.7)
	3
	>>> add_integer(1.6, 200.1)
	201


Non-Numbers
============

checking the addition of strings

	>>> add_integer('a', 0)
	Traceback (most recent call last):
	...
	TypeError: a must be an integer
	>>> add_integer(100, '10')
	Traceback (most recent call last):
	...
	TypeError: b must be an integer
	>>> add_integer('20', '30')
	Traceback (most recent call last):
	...
	TypeError: a must be an integer



Checking iterables/sequences addition

::
	>>> add_integer([1, 2], 100)
	Traceback (most recent call last):
	...
	TypeError: a must be an integer
